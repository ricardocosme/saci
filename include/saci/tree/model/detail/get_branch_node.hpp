#pragma once

#include "saci/tree/model/detail/T_is_function_obj.hpp"

namespace saci { namespace tree { namespace detail {

//This is a hack to support serialization of a previous version that
//uses a class collection_branch_node to handle a branch_node when T
//was a FunctionObject. 
namespace legacy {

//This simulates the case where collectioon_branch_node was
//specialized with an implementation using a base class which was
//serializable. We need here to skip the metadata generated by
//Boost.Serialization that is associated to this base.
template<typename T,
         typename CheckPolicy,
         typename Children,
         typename Parent>
struct branch_node_base : branch_node<T, CheckPolicy, Children, Parent> {
    using base = branch_node<T, CheckPolicy, Children, Parent>;
    using base::base;
};

template<typename T,
         typename CheckPolicy,
         typename Children,
         typename Parent,
         typename Enable = void>
struct get_branch_node;

template<typename T,
         typename CheckPolicy,
         typename Children,
         typename Parent>
struct get_branch_node<
    T,
    CheckPolicy,
    Children,
    Parent,
    enable_if_T_is_function_obj<T, Parent>>
{
    using type = branch_node_base<
        T,
        CheckPolicy,
        Children,
        Parent>;
};

template<typename T,
         typename CheckPolicy,
         typename Children,
         typename Parent>
struct get_branch_node<
    T,
    CheckPolicy,
    Children,
    Parent,
    enable_if_T_is_not_function_obj<T, Parent>>
{
    using type = branch_node<
        T,
        CheckPolicy,
        Children,
        Parent>;
};

} //namespace legacy

}}}
